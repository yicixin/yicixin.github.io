<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on 绝知</title>
    <link>https://www.yici.xin/tags/rust/</link>
    <description>Recent content in Rust on 绝知</description>
    <image>
      <url>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 16 May 2023 21:26:57 +0800</lastBuildDate><atom:link href="https://www.yici.xin/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust动态数组Vector</title>
      <link>https://www.yici.xin/post/tech/rust%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84vector/</link>
      <pubDate>Tue, 16 May 2023 21:26:57 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84vector/</guid>
      <description>&lt;p&gt;在Rust中，动态数组被称为&amp;quot;Vec&amp;quot;或&amp;quot;Vector&amp;quot;。Vector是一种在堆上分配内存的集合类型，允许你存储多个值。它的大小是动态的，可以根据需要进行增减。&lt;/p&gt;
&lt;h2 id=&#34;创建vector&#34;&gt;创建Vector&lt;/h2&gt;
&lt;p&gt;创建rust动态数组有好几种方式&lt;/p&gt;


&lt;div class=&#34;tab-panel&#34;&gt;
    &lt;div class=&#34;tab-nav&#34;&gt;
    
        &lt;button
          data-tab-item=&#34;New&#34;
          data-tab-group=&#34;0.6775115532070333&#34;
          class=&#34;tab-nav-button btn active&#34;
          onclick=&#34;switchTab(&#39;0.6775115532070333&#39;,&#39;New&#39;)&#34;
         &gt;New&lt;/button&gt;
    
        &lt;button
          data-tab-item=&#34;预先设置容量&#34;
          data-tab-group=&#34;0.6775115532070333&#34;
          class=&#34;tab-nav-button btn &#34;
          onclick=&#34;switchTab(&#39;0.6775115532070333&#39;,&#39;预先设置容量&#39;)&#34;
         &gt;预先设置容量&lt;/button&gt;
    
        &lt;button
          data-tab-item=&#34;vec!宏&#34;
          data-tab-group=&#34;0.6775115532070333&#34;
          class=&#34;tab-nav-button btn &#34;
          onclick=&#34;switchTab(&#39;0.6775115532070333&#39;,&#39;vec!宏&#39;)&#34;
         &gt;vec!宏&lt;/button&gt;
    
    &lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        
        &lt;div data-tab-item=&#34;New&#34; data-tab-group=&#34;0.6775115532070333&#34; class=&#34;tab-item active&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; v: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::new();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
        
        &lt;div data-tab-item=&#34;预先设置容量&#34; data-tab-group=&#34;0.6775115532070333&#34; class=&#34;tab-item &#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; v: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Vec::with_capacity(capacity)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
        
        &lt;div data-tab-item=&#34;vec!宏&#34; data-tab-group=&#34;0.6775115532070333&#34; class=&#34;tab-item &#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
        
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;读取元素&#34;&gt;读取元素&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Vec&lt;/code&gt;读取指定位置的元素有两种方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用下标&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;tab-panel&#34;&gt;
    &lt;div class=&#34;tab-nav&#34;&gt;
    
        &lt;button
          data-tab-item=&#34;下标索引&#34;
          data-tab-group=&#34;0.03505140155485743&#34;
          class=&#34;tab-nav-button btn active&#34;
          onclick=&#34;switchTab(&#39;0.03505140155485743&#39;,&#39;下标索引&#39;)&#34;
         &gt;下标索引&lt;/button&gt;
    
        &lt;button
          data-tab-item=&#34;get&#34;
          data-tab-group=&#34;0.03505140155485743&#34;
          class=&#34;tab-nav-button btn &#34;
          onclick=&#34;switchTab(&#39;0.03505140155485743&#39;,&#39;get&#39;)&#34;
         &gt;get&lt;/button&gt;
    
    &lt;/div&gt;
    &lt;div class=&#34;tab-content&#34;&gt;
        
        &lt;div data-tab-item=&#34;下标索引&#34; data-tab-group=&#34;0.03505140155485743&#34; class=&#34;tab-item active&#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; third: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;v[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;第三个元素是 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;, third);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
        
        &lt;div data-tab-item=&#34;get&#34; data-tab-group=&#34;0.03505140155485743&#34; class=&#34;tab-item &#34;&gt;
            &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec![&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;match&lt;/span&gt; v.get(&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Some(third) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;第三个元素是 &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{third}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        None &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; println!(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;去你的第三个元素，根本没有！&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
        &lt;/div&gt;
        
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;和其它语言一样，集合类型的索引下标都是从 &lt;code&gt;0&lt;/code&gt; 开始，&lt;code&gt;&amp;amp;v[2]&lt;/code&gt; 表示借用 &lt;code&gt;v&lt;/code&gt; 中的第三个元素，最终会获得该元素的引用。而 &lt;code&gt;v.get(2)&lt;/code&gt; 也是访问第三个元素，但是有所不同的是，它返回了 &lt;code&gt;Option&amp;lt;&amp;amp;T&amp;gt;&lt;/code&gt;，因此还需要额外的 &lt;code&gt;match&lt;/code&gt; 来匹配解构出具体的值。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust——泛型和trait</title>
      <link>https://www.yici.xin/post/tech/rust%E6%B3%9B%E5%9E%8B%E5%92%8Ctrait/</link>
      <pubDate>Wed, 18 Jan 2023 14:16:44 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E6%B3%9B%E5%9E%8B%E5%92%8Ctrait/</guid>
      <description>&lt;h2 id=&#34;泛型&#34;&gt;泛型&lt;/h2&gt;
&lt;h3 id=&#34;函数签名中使用泛型&#34;&gt;函数签名中使用泛型&lt;/h3&gt;
&lt;p&gt;尝试编写一个寻找数组中最大值的函数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largest_i32&lt;/span&gt;(list: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;]) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; largest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; list.iter() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; largest {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            largest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    largest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该函数仅支持i32类型，如果我们需要一个char类型的largest_char函数，应该会是这样:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largest_char&lt;/span&gt;(list: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt;]) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;char&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; largest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; list.iter() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; largest {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            largest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    largest
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以发现，我们在编写一些逻辑重复，仅类型不同的代码，为了能够支持更多的类型而不需要手写它们的largest函数，可以将这部分代码中的类型使用泛型替换。&lt;/p&gt;
&lt;p&gt;所以泛型版本应该是这么写的:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;largest_t&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(list: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;[T]) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt; {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; largest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;list[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;];  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; item &lt;span style=&#34;color:#66d9ef&#34;&gt;in&lt;/span&gt; list.iter() {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; largest {  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            largest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; item;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    largest  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先我们在函数名后添加了&lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt;，这是一个泛型参数，参数list也变成了一个泛型slice，同样的，返回值也进行了修改，而我们的函数体不需要任何修改。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Rust错误处理</title>
      <link>https://www.yici.xin/post/tech/rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 16 Jan 2023 10:02:41 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>&lt;p&gt;rust中的错误分为&lt;strong&gt;可恢复错误&lt;/strong&gt;（&lt;em&gt;recoverable&lt;/em&gt;）和 &lt;strong&gt;不可恢复错误&lt;/strong&gt;（&lt;em&gt;unrecoverable&lt;/em&gt;）。可恢复错误使用&lt;code&gt;Result&amp;lt;T,E&amp;gt;&lt;/code&gt;枚举，不可恢复错误使用&lt;code&gt;panic！&lt;/code&gt;宏。&lt;/p&gt;
&lt;h2 id=&#34;不可恢复错误panic宏&#34;&gt;不可恢复错误——panic!宏&lt;/h2&gt;

&lt;style type=&#34;text/css&#34; media=&#34;screen&#34;&gt;
    html {
        --color-alert-info-text: #24292e;
        --color-alert-info-bg: #dbedff;
        --color-alert-info-border: rgba(4, 66, 137, 0.2);
        --color-alert-warn-text: #24292e;
        --color-alert-warn-bg: #fffbdd;
        --color-alert-warn-border: rgba(176, 136, 0, 0.2);
        --color-alert-error-text: #24292e;
        --color-alert-error-bg: #ffe3e6;
        --color-alert-error-border: rgba(158, 28, 35, 0.2);
        --color-alert-success-text: #24292e;
        --color-alert-success-bg: #dcffe4;
        --color-alert-success-border: rgba(23, 111, 44, 0.2);
    }

    html[data-theme=&#39;dark&#39;] {
        --color-alert-info-text: #79c0ff;
        --color-alert-info-bg: rgba(56, 139, 253, 0.1);
        --color-alert-info-border: rgba(56, 139, 253, 0.4);
        --color-alert-warn-text: #e3b341;
        --color-alert-warn-bg: rgba(187, 128, 9, 0.1);
        --color-alert-warn-border: rgba(187, 128, 9, 0.4);
        --color-alert-error-text: #ff7b72;
        --color-alert-error-bg: rgba(248, 81, 73, 0.1);
        --color-alert-error-border: rgba(248, 81, 73, 0.4);
        --color-alert-success-text: #56d364;
        --color-alert-success-bg: rgba(46, 160, 67, 0.1);
        --color-alert-success-border: rgba(46, 160, 67, 0.4);
    }

    .tips {
        position: relative;
        padding: 20px 16px;
        margin-bottom: 20px;
        border-style: solid;
        border-width: 1px;
        border-radius: 6px;
        border-left-style: solid;
        border-left-width: 6px;
    }

    .tips.info {
        color: var(--color-alert-info-text);
        background-image: linear-gradient(var(--color-alert-info-bg), var(--color-alert-info-bg));
        border-color: var(--color-alert-info-border);
    }

    .tips.warn {
        color: var(--color-alert-warn-text);
        background-image: linear-gradient(var(--color-alert-warn-bg), var(--color-alert-warn-bg));
        border-color: var(--color-alert-warn-border);
    }

    .tips.error {
        color: var(--color-alert-error-text);
        background-image: linear-gradient(var(--color-alert-error-bg), var(--color-alert-error-bg));
        border-color: var(--color-alert-error-border);
    }

    .tips.success {
        color: var(--color-alert-success-text);
        background-image: linear-gradient(var(--color-alert-success-bg), var(--color-alert-success-bg));
        border-color: var(--color-alert-success-border);
    }

    #tips-title {
        font-size: 19px;
        font-weight: 800;
        margin-bottom: 10px;
    }
&lt;/style&gt;&lt;div class=&#34;tips panic!宏的展开(_unwinding_)和终止(_abort_)&#34;&gt;&lt;p&gt;当出现 panic 时，程序默认会开始 &lt;strong&gt;展开&lt;/strong&gt;（&lt;em&gt;unwinding&lt;/em&gt;），这意味着 Rust 会回溯栈并清理它遇到的每一个函数的数据，不过这个回溯并清理的过程有很多工作。另一种选择是直接 &lt;strong&gt;终止&lt;/strong&gt;（&lt;em&gt;abort&lt;/em&gt;），这会不清理数据就退出程序。那么程序所使用的内存需要由操作系统来清理。如果你需要项目的最终二进制文件越小越好，panic 时通过在 &lt;em&gt;Cargo.toml&lt;/em&gt; 的 &lt;code&gt;[profile]&lt;/code&gt; 部分增加 &lt;code&gt;panic = &#39;abort&#39;&lt;/code&gt;，可以由展开切换为终止。例如，如果你想要在release模式中 panic 时直接终止：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一些rust基础知识</title>
      <link>https://www.yici.xin/post/tech/%E4%B8%80%E4%BA%9Brust%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 21 Dec 2022 18:14:01 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/%E4%B8%80%E4%BA%9Brust%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>&lt;h2 id=&#34;变量与可变性&#34;&gt;变量与可变性&lt;/h2&gt;
&lt;h3 id=&#34;变量的可变性&#34;&gt;变量的可变性&lt;/h3&gt;
&lt;p&gt;rust中进行变量的声明时，使用&lt;code&gt;let&lt;/code&gt;关键字，如:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样声明出来的变量是不可变的，不可以进行第二次赋值。
如果需要后续可以修改这个变量，在声明时需要加上&lt;code&gt;mut&lt;/code&gt;关键字:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;mut&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;常量&#34;&gt;常量&lt;/h3&gt;
&lt;p&gt;声明常量使用 &lt;code&gt;const&lt;/code&gt; 关键字而不是 &lt;code&gt;let&lt;/code&gt;，并且&lt;strong&gt;必须&lt;/strong&gt;注明值的类型，且声明时就必须赋值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ✅
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;THREE_HOURS_IN_SECONDS&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ❌
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;THREE_HOURS_IN_SECONDS&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;u32&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;THREE_HOURS_IN_SECONDS&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;60&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;style type=&#34;text/css&#34; media=&#34;screen&#34;&gt;
    html {
        --color-alert-info-text: #24292e;
        --color-alert-info-bg: #dbedff;
        --color-alert-info-border: rgba(4, 66, 137, 0.2);
        --color-alert-warn-text: #24292e;
        --color-alert-warn-bg: #fffbdd;
        --color-alert-warn-border: rgba(176, 136, 0, 0.2);
        --color-alert-error-text: #24292e;
        --color-alert-error-bg: #ffe3e6;
        --color-alert-error-border: rgba(158, 28, 35, 0.2);
        --color-alert-success-text: #24292e;
        --color-alert-success-bg: #dcffe4;
        --color-alert-success-border: rgba(23, 111, 44, 0.2);
    }

    html[data-theme=&#39;dark&#39;] {
        --color-alert-info-text: #79c0ff;
        --color-alert-info-bg: rgba(56, 139, 253, 0.1);
        --color-alert-info-border: rgba(56, 139, 253, 0.4);
        --color-alert-warn-text: #e3b341;
        --color-alert-warn-bg: rgba(187, 128, 9, 0.1);
        --color-alert-warn-border: rgba(187, 128, 9, 0.4);
        --color-alert-error-text: #ff7b72;
        --color-alert-error-bg: rgba(248, 81, 73, 0.1);
        --color-alert-error-border: rgba(248, 81, 73, 0.4);
        --color-alert-success-text: #56d364;
        --color-alert-success-bg: rgba(46, 160, 67, 0.1);
        --color-alert-success-border: rgba(46, 160, 67, 0.4);
    }

    .tips {
        position: relative;
        padding: 20px 16px;
        margin-bottom: 20px;
        border-style: solid;
        border-width: 1px;
        border-radius: 6px;
        border-left-style: solid;
        border-left-width: 6px;
    }

    .tips.info {
        color: var(--color-alert-info-text);
        background-image: linear-gradient(var(--color-alert-info-bg), var(--color-alert-info-bg));
        border-color: var(--color-alert-info-border);
    }

    .tips.warn {
        color: var(--color-alert-warn-text);
        background-image: linear-gradient(var(--color-alert-warn-bg), var(--color-alert-warn-bg));
        border-color: var(--color-alert-warn-border);
    }

    .tips.error {
        color: var(--color-alert-error-text);
        background-image: linear-gradient(var(--color-alert-error-bg), var(--color-alert-error-bg));
        border-color: var(--color-alert-error-border);
    }

    .tips.success {
        color: var(--color-alert-success-text);
        background-image: linear-gradient(var(--color-alert-success-bg), var(--color-alert-success-bg));
        border-color: var(--color-alert-success-border);
    }

    #tips-title {
        font-size: 19px;
        font-weight: 800;
        margin-bottom: 10px;
    }
&lt;/style&gt;&lt;div class=&#34;tips info&#34;&gt;&lt;p id=&#34;tips-title&#34;&gt;不可变变量与常量有什么区别呢?&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
