<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>rust on yicixin&#39;s blog</title>
    <link>https://www.yici.xin/tags/rust/</link>
    <description>Recent content in rust on yicixin&#39;s blog</description>
    <image>
      <url>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 06 Jun 2023 23:09:15 +0800</lastBuildDate><atom:link href="https://www.yici.xin/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust函数式编程特性 迭代器和闭包</title>
      <link>https://www.yici.xin/post/tech/rust%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%89%B9%E6%80%A7-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/</link>
      <pubDate>Tue, 06 Jun 2023 23:09:15 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B%E7%89%B9%E6%80%A7-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%92%8C%E9%97%AD%E5%8C%85/</guid>
      <description>简介 Rust’s design has taken inspiration from many existing languages and techniques, and one significant influence is functional programming. Programming in a functional style often includes using functions as values by passing them in arguments, returning them from other functions, assigning them to variables for later execution, and so forth.
In this chapter, we won’t debate the issue of what functional programming is or isn’t but will instead discuss some features of Rust that are similar to features in many languages often referred to as functional.</description>
    </item>
    
    <item>
      <title>Rust动态数组Vector</title>
      <link>https://www.yici.xin/post/tech/rust%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84vector/</link>
      <pubDate>Tue, 16 May 2023 21:26:57 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84vector/</guid>
      <description>在Rust中，动态数组被称为&amp;quot;Vec&amp;quot;或&amp;quot;Vector&amp;quot;。Vector是一种在堆上分配内存的集合类型，允许你存储多个值。它的大小是动态的，可以根据需要进行增减。
创建Vector 创建rust动态数组有好几种方式
new 预先设置容量 vec!宏 let v: Vec&amp;lt;i32&amp;gt; = Vec::new(); let v: Vec&amp;lt;i32&amp;gt; = Vec::with_capacity(capacity) let v = vec![1, 2, 3]; 读取元素 Vec读取指定位置的元素有两种方式
使用下标 使用get 下标索引 get fn main() { let v = vec![1, 2, 3, 4, 5]; let third: &amp;amp;i32 = &amp;amp;v[2]; println!(&amp;#34;第三个元素是 {}&amp;#34;, third); } fn main() { let v = vec![1, 2, 3, 4, 5]; match v.get(2) { Some(third) =&amp;gt; println!(&amp;#34;第三个元素是 {third}&amp;#34;), None =&amp;gt; println!(&amp;#34;去你的第三个元素，根本没有！&amp;#34;), } } 和其它语言一样，集合类型的索引下标都是从 0 开始，&amp;amp;v[2] 表示借用 v 中的第三个元素，最终会获得该元素的引用。而 v.</description>
    </item>
    
    <item>
      <title>Rust——泛型和trait</title>
      <link>https://www.yici.xin/post/tech/rust%E6%B3%9B%E5%9E%8B%E5%92%8Ctrait/</link>
      <pubDate>Wed, 18 Jan 2023 14:16:44 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E6%B3%9B%E5%9E%8B%E5%92%8Ctrait/</guid>
      <description>泛型 函数签名中使用泛型 尝试编写一个寻找数组中最大值的函数:
fn largest_i32(list: &amp;amp;[i32]) -&amp;gt; &amp;amp;i32 { let mut largest = &amp;amp;list[0]; for item in list.iter() { if item &amp;gt; largest { largest = item; } } largest } 该函数仅支持i32类型，如果我们需要一个char类型的largest_char函数，应该会是这样:
fn largest_char(list: &amp;amp;[char]) -&amp;gt; &amp;amp;char { let mut largest = &amp;amp;list[0]; for item in list.iter() { if item &amp;gt; largest { largest = item; } } largest } 可以发现，我们在编写一些逻辑重复，仅类型不同的代码，为了能够支持更多的类型而不需要手写它们的largest函数，可以将这部分代码中的类型使用泛型替换。
所以泛型版本应该是这么写的:
fn largest_t&amp;lt;T&amp;gt;(list: &amp;amp;[T]) -&amp;gt; &amp;amp;T { let mut largest = &amp;amp;list[0]; for item in list.</description>
    </item>
    
    <item>
      <title>Rust错误处理</title>
      <link>https://www.yici.xin/post/tech/rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 16 Jan 2023 10:02:41 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>rust中的错误分为可恢复错误（recoverable）和 不可恢复错误（unrecoverable）。可恢复错误使用Result&amp;lt;T,E&amp;gt;枚举，不可恢复错误使用panic！宏。
不可恢复错误——panic!宏 当出现 panic 时，程序默认会开始 展开（unwinding），这意味着 Rust 会回溯栈并清理它遇到的每一个函数的数据，不过这个回溯并清理的过程有很多工作。另一种选择是直接 终止（abort），这会不清理数据就退出程序。那么程序所使用的内存需要由操作系统来清理。如果你需要项目的最终二进制文件越小越好，panic 时通过在 Cargo.toml 的 [profile] 部分增加 panic = &#39;abort&#39;，可以由展开切换为终止。例如，如果你想要在release模式中 panic 时直接终止：
[profile.release] panic = &amp;#39;abort&amp;#39; panic!宏的使用 fn main() { panic!(&amp;#34;crash and burn&amp;#34;); } 该代码的输出是这样的: 我们仅能看到panic!时提供的内容&amp;quot;crash and burn&amp;quot;，和panic!的调用位置，要想看到panic!宏的完整调用栈，可以使用RUST_BACKTRACE=1 cargo run命令来执行程序。 实际的输出可能因不同的操作系统和 Rust 版本而有所不同 可恢复错误——Result&amp;lt;T,E&amp;gt;枚举 enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), } T 和 E 是泛型类型参数。通常处理可恢复错误时，函数将会返回一个Result，调用者可使用match进行匹配。
use std::fs::File; fn main() { let f = File::open(&amp;#34;hello.txt&amp;#34;); let f = match f { Ok(file) =&amp;gt; file, // 如果成功,返回值的file赋值给f Err(error) =&amp;gt; { panic!</description>
    </item>
    
    <item>
      <title>Rust Option枚举</title>
      <link>https://www.yici.xin/post/read/rust-option%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Thu, 29 Dec 2022 15:41:07 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/read/rust-option%E6%9E%9A%E4%B8%BE/</guid>
      <description>原文链接🔗
The Option Enum and Its Advantages Over Null Values 比null更优的选择——Option枚举
This section explores a case study of Option, which is another enum defined by the standard library. The Option type encodes the very common scenario in which a value could be something or it could be nothing.
这一节探讨Option的一个学习案例，Option是另一个由标准库定义的枚举。Opiton类型编码了一个非常常见场景，值可以是某值，也可以是空。
For example, if you request the first of a list containing items, you would get a value. If you request the first item of an empty list, you would get nothing.</description>
    </item>
    
    <item>
      <title>Rust程序设计——枚举</title>
      <link>https://www.yici.xin/post/read/rust%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%9E%9A%E4%B8%BE/</link>
      <pubDate>Wed, 28 Dec 2022 23:09:59 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/read/rust%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1-%E6%9E%9A%E4%B8%BE/</guid>
      <description>原文链接🔗
Defining an Enum 定义枚举
Where structs give you a way of grouping together related fields and data, like a Rectangle with its width and height, enums give you a way of saying a value is one of a possible set of values. For example, we may want to say that Rectangle is one of a set of possible shapes that also includes Circle and Triangle. To do this, Rust allows us to encode these possibilities as an enum.</description>
    </item>
    
    <item>
      <title>Rust的所有权系统</title>
      <link>https://www.yici.xin/post/tech/rust%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 22 Dec 2022 16:44:27 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E7%9A%84%E6%89%80%E6%9C%89%E6%9D%83%E7%B3%BB%E7%BB%9F/</guid>
      <description> 所有权（系统）是 Rust 最为与众不同的特性，对语言的其他部分有着深刻含义。它让 Rust 无需垃圾回收（garbage collector）即可保障内存安全，因此理解 Rust 中所有权如何工作是十分重要的。
you know，程序的运行其实就是一系列的内存操作，如何管理内存是所有编程语言都逃不开的问题，管理内存的手段也是编程语言的核心特性之一。在rust之前，编程语言对内存的管理有这么两个派别： 以C、C++为首的手动管理派，程序员们需要自己亲自申请、分配和释放内存，java、go、C#的自动管理派，一般称这个机制为垃圾回收(GC)，GC会负责内存的申请、分配、追踪和回收，减轻程序员的负担👀。 而rust给出了一条新的路线，通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查，违反了任何规则，程序都不能编译。不过你放心，在运行时，所有权系统的任何功能都不会减慢程序。
所有权规则 在查看后续内容时，请谨记以下规则
Rust 中的每一个值都有一个 所有者（owner）。 值在任一时刻有且只有一个所有者。 当所有者（变量）离开作用域，这个值将被丢弃。 </description>
    </item>
    
    <item>
      <title>一些rust基础知识</title>
      <link>https://www.yici.xin/post/tech/%E4%B8%80%E4%BA%9Brust%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 21 Dec 2022 18:14:01 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/%E4%B8%80%E4%BA%9Brust%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>变量与可变性 变量的可变性 rust中进行变量的声明时，使用let关键字，如:
let x; 这样声明出来的变量是不可变的，不可以进行第二次赋值。 如果需要后续可以修改这个变量，在声明时需要加上mut关键字:
let mut x; 常量 声明常量使用 const 关键字而不是 let，并且必须注明值的类型，且声明时就必须赋值。
// ✅ const THREE_HOURS_IN_SECONDS: u32 = 3 * 60 * 60; // ❌ const THREE_HOURS_IN_SECONDS: u32; THREE_HOURS_IN_SECONDS = 3 * 60 * 60 不可变变量与常量有什么区别呢?
首先一个区别是，声明常量时提供的值必须是编译期间就可以计算出来的，而不可变变量虽然不可变，但是声明时可以使用运行时值。 内存布局角度来看，常量一般都是存储在数据段，而变量会在栈区或堆区。 隐藏 rust中，可以使用let定义一个与之前变量同名的新变量，此时同名的第一个变量隐藏了。
fn main() { // 定义x let x = 5; // 再次定义x，此时第一个x被隐藏 let x = 6; { // 再次定义x，但是仅在该作用域内生效 let x = x * 2; println!(&amp;#34;The value of x in the inner scope is: {x}&amp;#34;); // 12 } println!</description>
    </item>
    
  </channel>
</rss>
