<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rust on yicixin&#39;s blog</title>
    <link>https://www.yici.xin/tags/rust/</link>
    <description>Recent content in Rust on yicixin&#39;s blog</description>
    <image>
      <url>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 16 May 2023 21:26:57 +0800</lastBuildDate><atom:link href="https://www.yici.xin/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust动态数组Vector</title>
      <link>https://www.yici.xin/post/tech/rust%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84vector/</link>
      <pubDate>Tue, 16 May 2023 21:26:57 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84vector/</guid>
      <description>在Rust中，动态数组被称为&amp;quot;Vec&amp;quot;或&amp;quot;Vector&amp;quot;。Vector是一种在堆上分配内存的集合类型，允许你存储多个值。它的大小是动态的，可以根据需要进行增减。
创建Vector 创建rust动态数组有好几种方式
New 预先设置容量 vec!宏 let v: Vec&amp;lt;i32&amp;gt; = Vec::new(); let v: Vec&amp;lt;i32&amp;gt; = Vec::with_capacity(capacity) let v = vec![1, 2, 3]; 读取元素 Vec读取指定位置的元素有两种方式
使用下标 使用get 下标索引 get fn main() { let v = vec![1, 2, 3, 4, 5]; let third: &amp;amp;i32 = &amp;amp;v[2]; println!(&amp;#34;第三个元素是 {}&amp;#34;, third); } fn main() { let v = vec![1, 2, 3, 4, 5]; match v.get(2) { Some(third) =&amp;gt; println!(&amp;#34;第三个元素是 {third}&amp;#34;), None =&amp;gt; println!(&amp;#34;去你的第三个元素，根本没有！&amp;#34;), } } 和其它语言一样，集合类型的索引下标都是从 0 开始，&amp;amp;v[2] 表示借用 v 中的第三个元素，最终会获得该元素的引用。而 v.</description>
    </item>
    
    <item>
      <title>Rust——泛型和trait</title>
      <link>https://www.yici.xin/post/tech/rust%E6%B3%9B%E5%9E%8B%E5%92%8Ctrait/</link>
      <pubDate>Wed, 18 Jan 2023 14:16:44 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E6%B3%9B%E5%9E%8B%E5%92%8Ctrait/</guid>
      <description>泛型 函数签名中使用泛型 尝试编写一个寻找数组中最大值的函数:
fn largest_i32(list: &amp;amp;[i32]) -&amp;gt; &amp;amp;i32 { let mut largest = &amp;amp;list[0]; for item in list.iter() { if item &amp;gt; largest { largest = item; } } largest } 该函数仅支持i32类型，如果我们需要一个char类型的largest_char函数，应该会是这样:
fn largest_char(list: &amp;amp;[char]) -&amp;gt; &amp;amp;char { let mut largest = &amp;amp;list[0]; for item in list.iter() { if item &amp;gt; largest { largest = item; } } largest } 可以发现，我们在编写一些逻辑重复，仅类型不同的代码，为了能够支持更多的类型而不需要手写它们的largest函数，可以将这部分代码中的类型使用泛型替换。
所以泛型版本应该是这么写的:
fn largest_t&amp;lt;T&amp;gt;(list: &amp;amp;[T]) -&amp;gt; &amp;amp;T { let mut largest = &amp;amp;list[0]; for item in list.</description>
    </item>
    
    <item>
      <title>Rust错误处理</title>
      <link>https://www.yici.xin/post/tech/rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 16 Jan 2023 10:02:41 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/rust%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid>
      <description>rust中的错误分为可恢复错误（recoverable）和 不可恢复错误（unrecoverable）。可恢复错误使用Result&amp;lt;T,E&amp;gt;枚举，不可恢复错误使用panic！宏。
不可恢复错误——panic!宏 当出现 panic 时，程序默认会开始 展开（unwinding），这意味着 Rust 会回溯栈并清理它遇到的每一个函数的数据，不过这个回溯并清理的过程有很多工作。另一种选择是直接 终止（abort），这会不清理数据就退出程序。那么程序所使用的内存需要由操作系统来清理。如果你需要项目的最终二进制文件越小越好，panic 时通过在 Cargo.toml 的 [profile] 部分增加 panic = &#39;abort&#39;，可以由展开切换为终止。例如，如果你想要在release模式中 panic 时直接终止：
[profile.release] panic = &amp;#39;abort&amp;#39; panic!宏的使用 fn main() { panic!(&amp;#34;crash and burn&amp;#34;); } 该代码的输出是这样的: 我们仅能看到panic!时提供的内容&amp;quot;crash and burn&amp;quot;，和panic!的调用位置，要想看到panic!宏的完整调用栈，可以使用RUST_BACKTRACE=1 cargo run命令来执行程序。 实际的输出可能因不同的操作系统和 Rust 版本而有所不同 可恢复错误——Result&amp;lt;T,E&amp;gt;枚举 enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), } T 和 E 是泛型类型参数。通常处理可恢复错误时，函数将会返回一个Result，调用者可使用match进行匹配。
use std::fs::File; fn main() { let f = File::open(&amp;#34;hello.txt&amp;#34;); let f = match f { Ok(file) =&amp;gt; file, // 如果成功,返回值的file赋值给f Err(error) =&amp;gt; { panic!</description>
    </item>
    
    <item>
      <title>一些rust基础知识</title>
      <link>https://www.yici.xin/post/tech/%E4%B8%80%E4%BA%9Brust%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Wed, 21 Dec 2022 18:14:01 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/%E4%B8%80%E4%BA%9Brust%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>变量与可变性 变量的可变性 rust中进行变量的声明时，使用let关键字，如:
let x; 这样声明出来的变量是不可变的，不可以进行第二次赋值。 如果需要后续可以修改这个变量，在声明时需要加上mut关键字:
let mut x; 常量 声明常量使用 const 关键字而不是 let，并且必须注明值的类型，且声明时就必须赋值。
// ✅ const THREE_HOURS_IN_SECONDS: u32 = 3 * 60 * 60; // ❌ const THREE_HOURS_IN_SECONDS: u32; THREE_HOURS_IN_SECONDS = 3 * 60 * 60 不可变变量与常量有什么区别呢?
首先一个区别是，声明常量时提供的值必须是编译期间就可以计算出来的，而不可变变量虽然不可变，但是声明时可以使用运行时值。 内存布局角度来看，常量一般都是存储在数据段，而变量会在栈区或堆区。 隐藏 rust中，可以使用let定义一个与之前变量同名的新变量，此时同名的第一个变量隐藏了。
fn main() { // 定义x let x = 5; // 再次定义x，此时第一个x被隐藏 let x = 6; { // 再次定义x，但是仅在该作用域内生效 let x = x * 2; println!(&amp;#34;The value of x in the inner scope is: {x}&amp;#34;); // 12 } println!</description>
    </item>
    
  </channel>
</rss>
