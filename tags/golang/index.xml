<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>golang on yicixin&#39;s blog</title>
    <link>http://yici.xin/tags/golang/</link>
    <description>Recent content in golang on yicixin&#39;s blog</description>
    <image>
      <url>http://yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 30 Dec 2022 10:51:52 +0800</lastBuildDate><atom:link href="http://yici.xin/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang——plan9汇编</title>
      <link>http://yici.xin/post/tech/golangplan9%E6%B1%87%E7%BC%96/</link>
      <pubDate>Fri, 30 Dec 2022 10:51:52 +0800</pubDate>
      
      <guid>http://yici.xin/post/tech/golangplan9%E6%B1%87%E7%BC%96/</guid>
      <description>基本指令 栈相关 在 plan9 汇编中，虽然存在push、pop指令，但是在生成的代码中一般是看不到的，通常栈的这两种操作会以操作SP寄存器的位置来替换。
SUBQ $0x18, SP // 对 SP 做减法，为函数分配函数栈帧 ... // 省略无用代码 ADDQ $0x18, SP // 对 SP 做加法，清除函数栈帧 栈的方向是从内存高位置向低位置的，所以对 SP 寄存器做减法，就是给栈分配内存，加法即回收内存。
x86 汇编中 push 和 pop 指令可以接一个寄存器，如 pop ax，表示将栈顶元素放入 ax 寄存器并且栈顶寄存器自动回退，而 plan9 只是做了栈顶寄存器操作，对于赋值操作需要使用 mov 指令 😭
数据搬运 plan9 汇编中，常数以$num形式表示，可以是负数，一般为 10 进制，当然也可以用$0x123的十六进制形式。
MOVB $1, DI // 1 byte MOVW $0x10, BX // 2 bytes MOVD $1, DX // 4 bytes MOVQ $-10, AX // 8 bytes plan9 汇编中使用的通常是带有后缀的 MOV 指令，不同后缀的区别是移动的字节大小。这和 x86 的汇编不一样，在 x86 汇编中，决定移动字节大小的是寄存器。</description>
    </item>
    
    <item>
      <title>Golang-map的操作</title>
      <link>http://yici.xin/post/tech/golang-map%E7%9A%84%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Fri, 30 Dec 2022 10:49:41 +0800</pubDate>
      
      <guid>http://yici.xin/post/tech/golang-map%E7%9A%84%E6%93%8D%E4%BD%9C/</guid>
      <description>创建 map 创建 map 的语法很简单
// 不指定map长度 ageMp := make(map[string]int) // 指定map长度 ageMp := make(map[string]int, 8) // ageMp 为 nil，不能向其添加元素，会直接panic var ageMp map[string]int 通过汇编语言，我们能够跟踪到 map 的创建最终会调用 runtime.makemap 方法
// makemap implements Go map creation for make(map[k]v, hint). // If the compiler has determined that the map or the first bucket // can be created on the stack, h and/or bucket may be non-nil. // If h != nil, the map can be created directly in h.</description>
    </item>
    
    <item>
      <title>Go程序的启动过程</title>
      <link>http://yici.xin/post/tech/go%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 27 Dec 2022 18:35:19 +0800</pubDate>
      
      <guid>http://yici.xin/post/tech/go%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%90%AF%E5%8A%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>我们知道go的一个优点是支持多个平台，这一特性的背后是对各种不同平台硬件指令的兼容，在go程序启动流程的第一步，就需要区分不同的硬件平台。
我目前使用的电脑是苹果的m1芯片mbp，该芯片使用的是arm架构，操作系统底层是darwin，对应的启动汇编文件是：runtime/rt0_darwin_arm64.s。
作个对比，我这里也放上amd64的启动汇编。
可以看到它们最终都调用了runtime的rt0_go方法，arm架构在runtime/asm_arm64.s，amd在runtime/asm_amd64.s，rt0_go不同平台实现不完全一致，但大同小异，我们挑出其中有价值的部分：
runtime·check 运行时类型检查，主要是校验编译器的翻译工作是否正确。 runtime·args 系统参数传递，主要是将系统参数转换传递给程序使用。 runtime·osinit 系统基本参数设置，主要是获取 CPU 核心数和内存物理页大小。 runtime·schedinit 进行各种运行时组件的初始化，包含调度器、内存分配器、堆、栈、GC 等一大堆初始化工作。会进行 p 的初始化，并将 m0 和某一个 p 进行绑定。 runtime·mainPC 主要工作是运行 main goroutine，虽然在runtime·rt0_go中指向的是$runtime·mainPC，但实质指向的是 runtime.main runtime·newproc 创建一个新的 goroutine，且绑定 runtime.main方法（也就是应用程序中的入口 main 方法）。并将其放入 m0 绑定的p的本地队列中去，以便后续调度。 runtime·mstart 启动 m，调度器开始进行循环调度。 </description>
    </item>
    
    <item>
      <title>Golang读写锁</title>
      <link>http://yici.xin/post/tech/golang%E8%AF%BB%E5%86%99%E9%94%81/</link>
      <pubDate>Tue, 27 Dec 2022 18:26:23 +0800</pubDate>
      
      <guid>http://yici.xin/post/tech/golang%E8%AF%BB%E5%86%99%E9%94%81/</guid>
      <description>之前写过关于互斥锁的内容， Golang互斥锁-Mutex 日期: 2022-12-27 &amp;nbsp; 标签: #golang&amp;nbsp; #锁&amp;nbsp; #源码解析&amp;nbsp; 互斥锁结构 // A Mutex is a mutual exclusion lock. // The zero value for a Mutex is an unlocked mutex. // // A Mutex must not be copied after first use. type Mutex struct { state int32 sema uint32 } state表示当前互斥锁的状态， sema是用于控制锁状态的信号量 在默认情况下，互斥锁的所有状态位都是 0，int32 中的不同位分别表示了不同的状态： mutexLocked — 表示互斥锁的锁定状态； mutexWoken — 唤醒模式，此时释放锁的g不会唤醒休眠的g； mutexStarving — 当前的互斥锁进入饥饿状态； waitersCount — 当前互斥锁上等待的 Goroutine 个数； 正常模式和饥饿模式的区别: 在正常模式下，锁的等待者会按照先进先出的顺序获取锁。但是刚被唤起的 Goroutine 与新创建的 Goroutine 竞争时，大概率会获取不到锁，为了减少这种情况的出现，一旦 Goroutine 超过 1ms 没有获取到锁，它就会将当前互斥锁切换饥饿模式，防止部分 Goroutine 被『饿死』。 .</description>
    </item>
    
    <item>
      <title>Golang互斥锁-Mutex</title>
      <link>http://yici.xin/post/tech/golang%E4%BA%92%E6%96%A5%E9%94%81/</link>
      <pubDate>Tue, 27 Dec 2022 18:22:59 +0800</pubDate>
      
      <guid>http://yici.xin/post/tech/golang%E4%BA%92%E6%96%A5%E9%94%81/</guid>
      <description>互斥锁结构 // A Mutex is a mutual exclusion lock. // The zero value for a Mutex is an unlocked mutex. // // A Mutex must not be copied after first use. type Mutex struct { state int32 sema uint32 } state表示当前互斥锁的状态， sema是用于控制锁状态的信号量
在默认情况下，互斥锁的所有状态位都是 0，int32 中的不同位分别表示了不同的状态：
mutexLocked — 表示互斥锁的锁定状态；
mutexWoken — 唤醒模式，此时释放锁的g不会唤醒休眠的g；
mutexStarving — 当前的互斥锁进入饥饿状态；
waitersCount — 当前互斥锁上等待的 Goroutine 个数；
正常模式和饥饿模式的区别:
在正常模式下，锁的等待者会按照先进先出的顺序获取锁。但是刚被唤起的 Goroutine 与新创建的 Goroutine 竞争时，大概率会获取不到锁，为了减少这种情况的出现，一旦 Goroutine 超过 1ms 没有获取到锁，它就会将当前互斥锁切换饥饿模式，防止部分 Goroutine 被『饿死』。</description>
    </item>
    
    <item>
      <title>pprof使用</title>
      <link>http://yici.xin/post/tech/pprof%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 27 Dec 2022 18:18:12 +0800</pubDate>
      
      <guid>http://yici.xin/post/tech/pprof%E4%BD%BF%E7%94%A8/</guid>
      <description>项目地址:
https://github.com/google/pprof
安装:
go install github.com/google/pprof@latest 什么是profile? A Profile is a collection of stack traces showing the call sequences that led to instances of a particular event, such as allocation. Packages can create and maintain their own profiles; the most common use is for tracking resources that must be explicitly closed, such as files or network connections.
Each Profile has a unique name. A few profiles are predefined:
goroutine - stack traces of all current goroutines heap - a sampling of all heap allocations threadcreate - stack traces that led to the creation of new OS threads block - stack traces that led to blocking on synchronization primitives mutex - stack traces of holders of contended mutexes There are 7 places you can get profiles in the default webserver: the ones mentioned above</description>
    </item>
    
    <item>
      <title>golang-map介绍</title>
      <link>http://yici.xin/post/tech/golang-map%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Wed, 05 Jan 2022 23:38:06 +0800</pubDate>
      
      <guid>http://yici.xin/post/tech/golang-map%E4%BB%8B%E7%BB%8D/</guid>
      <description>本文中使用的 go 版本：
go version go1.17.2 darwin/amd64
内容概述 本文介绍 golang 中经常用到的结构-map，简称哈希表、字典。介绍其结构及设计思路。
map 在源码中的结构——hmap Go 语言采用的核心数据结构是哈希查找表，使用链表解决哈希冲突。
在源码中$GOROOT/src/runtime/map.go，map 的核心结构体是这样的：
// A header for a Go map. type hmap struct { count int // map中的元素数量，即len(map)时的返回值 flags uint8 B uint8 // buckets的以2为底的对数, 即2^B=buckets noverflow uint16 // 溢出桶的近似数; see incrnoverflow for details hash0 uint32 // 哈希种子 buckets unsafe.Pointer // 2^B个bucket的数组，may be nil if count==0. oldbuckets unsafe.Pointer // 哈希在扩容时用于保存之前 buckets 的字段，它的大小是当前 buckets 的一半； nevacuate uintptr // progress counter for evacuation (buckets less than this have been evacuated) extra *mapextra // optional fields } 在上面我们需要关注的核心是buckets，它是一个指针，最终指向了bmap结构体数组</description>
    </item>
    
  </channel>
</rss>
