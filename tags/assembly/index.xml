<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>assembly on yicixin&#39;s blog</title>
    <link>http://yici.xin/tags/assembly/</link>
    <description>Recent content in assembly on yicixin&#39;s blog</description>
    <image>
      <url>http://yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 30 Dec 2022 10:51:52 +0800</lastBuildDate><atom:link href="http://yici.xin/tags/assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang——plan9汇编</title>
      <link>http://yici.xin/post/tech/golangplan9%E6%B1%87%E7%BC%96/</link>
      <pubDate>Fri, 30 Dec 2022 10:51:52 +0800</pubDate>
      
      <guid>http://yici.xin/post/tech/golangplan9%E6%B1%87%E7%BC%96/</guid>
      <description>基本指令 栈相关 在 plan9 汇编中，虽然存在push、pop指令，但是在生成的代码中一般是看不到的，通常栈的这两种操作会以操作SP寄存器的位置来替换。
SUBQ $0x18, SP // 对 SP 做减法，为函数分配函数栈帧 ... // 省略无用代码 ADDQ $0x18, SP // 对 SP 做加法，清除函数栈帧 栈的方向是从内存高位置向低位置的，所以对 SP 寄存器做减法，就是给栈分配内存，加法即回收内存。
x86 汇编中 push 和 pop 指令可以接一个寄存器，如 pop ax，表示将栈顶元素放入 ax 寄存器并且栈顶寄存器自动回退，而 plan9 只是做了栈顶寄存器操作，对于赋值操作需要使用 mov 指令 😭
数据搬运 plan9 汇编中，常数以$num形式表示，可以是负数，一般为 10 进制，当然也可以用$0x123的十六进制形式。
MOVB $1, DI // 1 byte MOVW $0x10, BX // 2 bytes MOVD $1, DX // 4 bytes MOVQ $-10, AX // 8 bytes plan9 汇编中使用的通常是带有后缀的 MOV 指令，不同后缀的区别是移动的字节大小。这和 x86 的汇编不一样，在 x86 汇编中，决定移动字节大小的是寄存器。</description>
    </item>
    
  </channel>
</rss>
