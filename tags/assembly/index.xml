<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Assembly on 绝知</title>
    <link>https://www.yici.xin/tags/assembly/</link>
    <description>Recent content in Assembly on 绝知</description>
    <image>
      <url>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 30 Dec 2022 10:51:52 +0800</lastBuildDate><atom:link href="https://www.yici.xin/tags/assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang——plan9汇编</title>
      <link>https://www.yici.xin/post/tech/golangplan9%E6%B1%87%E7%BC%96/</link>
      <pubDate>Fri, 30 Dec 2022 10:51:52 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/golangplan9%E6%B1%87%E7%BC%96/</guid>
      <description>&lt;h2 id=&#34;基本指令&#34;&gt;基本指令&lt;/h2&gt;
&lt;h3 id=&#34;栈相关&#34;&gt;栈相关&lt;/h3&gt;
&lt;p&gt;在 plan9 汇编中，虽然存在&lt;code&gt;push、pop&lt;/code&gt;指令，但是在生成的代码中一般是看不到的，通常栈的这两种操作会以操作&lt;code&gt;SP&lt;/code&gt;寄存器的位置来替换。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SUBQ $&lt;span style=&#34;color:#bd93f9&#34;&gt;0x18&lt;/span&gt;, SP &lt;span style=&#34;color:#6272a4&#34;&gt;// 对 SP 做减法，为函数分配函数栈帧&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;...&lt;/span&gt;               &lt;span style=&#34;color:#6272a4&#34;&gt;// 省略无用代码&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ADDQ $&lt;span style=&#34;color:#bd93f9&#34;&gt;0x18&lt;/span&gt;, SP &lt;span style=&#34;color:#6272a4&#34;&gt;// 对 SP 做加法，清除函数栈帧&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;栈的方向是从内存高位置向低位置的，所以对 SP 寄存器做减法，就是给栈分配内存，加法即回收内存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x86 汇编中 push 和 pop 指令可以接一个寄存器，如 pop ax，表示将栈顶元素放入 ax 寄存器并且栈顶寄存器自动回退，而 plan9 只是做了栈顶寄存器操作，对于赋值操作需要使用 mov 指令 😭&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;数据搬运&#34;&gt;数据搬运&lt;/h3&gt;
&lt;p&gt;plan9 汇编中，常数以&lt;code&gt;$num&lt;/code&gt;形式表示，可以是负数，一般为 10 进制，当然也可以用&lt;code&gt;$0x123&lt;/code&gt;的十六进制形式。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MOVB $&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, DI      &lt;span style=&#34;color:#6272a4&#34;&gt;// 1 byte&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MOVW $&lt;span style=&#34;color:#bd93f9&#34;&gt;0x10&lt;/span&gt;, BX   &lt;span style=&#34;color:#6272a4&#34;&gt;// 2 bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MOVD $&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, DX      &lt;span style=&#34;color:#6272a4&#34;&gt;// 4 bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MOVQ $&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;, AX     &lt;span style=&#34;color:#6272a4&#34;&gt;// 8 bytes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;plan9 汇编中使用的通常是带有后缀的 MOV 指令，不同后缀的区别是移动的字节大小。这和 x86 的汇编不一样，在 x86 汇编中，决定移动字节大小的是寄存器。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当然，还有个最明显的差异是 plan9 的操作数和 x86 是相反的，x86 汇编的 mov 是将右值移动到左部寄存器，而 plan9 是相反的。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
