<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HTTP on 绝知</title>
    <link>https://www.yici.xin/tags/http/</link>
    <description>Recent content in HTTP on 绝知</description>
    <image>
      <url>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 24 Mar 2023 22:40:52 +0800</lastBuildDate><atom:link href="https://www.yici.xin/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Http2.0和3.0</title>
      <link>https://www.yici.xin/post/tech/http2.0%E5%92%8C3.0/</link>
      <pubDate>Fri, 24 Mar 2023 22:40:52 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/http2.0%E5%92%8C3.0/</guid>
      <description>&lt;h2 id=&#34;http20&#34;&gt;HTTP2.0&lt;/h2&gt;
&lt;p&gt;HTTP/2 是 HTTP/1.1 的替代者，它的主要目的是改进网络性能，提升用户体验。与 HTTP/1.1 相比，HTTP/2 具有以下几个主要优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多路复用&lt;/li&gt;
&lt;li&gt;服务端推送&lt;/li&gt;
&lt;li&gt;二进制分帧&lt;/li&gt;
&lt;li&gt;流量控制&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;多路复用&#34;&gt;多路复用&lt;/h3&gt;
&lt;p&gt;多路复用：在 HTTP/1.1 中，如果要加载一个网页，浏览器需要创建一个个的连接来请求所有的资源（例如图片、CSS 文件和 JavaScript 文件）。这样会造成大量的连接建立和关闭，降低了效率。HTTP/2 允许&lt;strong&gt;在同一个连接上同时传输多个请求和响应&lt;/strong&gt;，从而大大提高了效率。&lt;/p&gt;
&lt;p&gt;这解决了一部分的HTTP1.0队头阻塞问题，可以假设这么一个情况，一个较大的js文件和一个较小的css文件都需要传输，但是如果js文件先于css文件，那么css文件就要等到js文件传输完之后才能进行传输，即使它比较小，其实可以更早的传输并使用。使用多路复用后，相当于发一部分js的包，发一部分css的包，这样较小的css包可以更早的传输完毕。&lt;/p&gt;
&lt;p&gt;这在http1.0中是无法实现的，主要问题是 HTTP/1.1 是一个纯文本协议，它只在有效荷载（payload）的前面附加头（headers）。它不会进一步区分单个（大块）资源与其他资源。这是 HTTP/1.1 协议设计方式的一个基础限制。如果只有一个 HTTP/1.1 连接，那么在切换到发送新资源之前，必须&lt;strong&gt;完整地&lt;/strong&gt;传输资源响应。如果前面的资源创建缓慢，可能会引起队头阻塞问题。这就是为什么浏览器开始为 HTTP/1.1 上的每个页面打开多个TCP链接(通常是6个)，你也可以通过多域名配置同时打开更多的TCP链接，也就是说，在不超过6个请求并发的情况下，就不会出现队头阻塞的情况。当然，大量的TCP链接肯定会导致更大的开销，如HTTPS的TLS握手操作。&lt;/p&gt;
&lt;p&gt;HTTP/2 的目标非常明确：&lt;strong&gt;能够回到单个 TCP 连接，解决队头阻塞问题&lt;/strong&gt;。或者说：我们希望能够正确地复用资源块（resource chunks）。这在 HTTP/1.1 中是不可能的，因为没有办法分辨一个块属于哪个资源，或者它在哪里结束，另一个块从哪里开始。HTTP/2 非常优雅地解决了这一问题，它在资源块之前添加了&lt;strong&gt;帧（frames）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;HTTP/2 在每个块前面放置一个的数据帧（DATA frame）。这些数据帧主要包含两个关键的元数据。首先：下面的块属于哪个资源。每个资源的“字节流（bytestream）”都被分配了一个唯一的数字，即&lt;strong&gt;流id（stream id）&lt;/strong&gt;。第二：块的大小是多少。因此，通过“framing”单个消息，HTTP/2 比 HTTP/1.1 更加灵活。它允许在单个 TCP 连接上通过交错排列块来多路传输多个资源。它还解决了第一个资源缓慢时的队头阻塞问题。&lt;/p&gt;

&lt;style type=&#34;text/css&#34; media=&#34;screen&#34;&gt;
    html {
        --color-alert-info-text: #24292e;
        --color-alert-info-bg: #dbedff;
        --color-alert-info-border: rgba(4, 66, 137, 0.2);
        --color-alert-warn-text: #24292e;
        --color-alert-warn-bg: #fffbdd;
        --color-alert-warn-border: rgba(176, 136, 0, 0.2);
        --color-alert-error-text: #24292e;
        --color-alert-error-bg: #ffe3e6;
        --color-alert-error-border: rgba(158, 28, 35, 0.2);
        --color-alert-success-text: #24292e;
        --color-alert-success-bg: #dcffe4;
        --color-alert-success-border: rgba(23, 111, 44, 0.2);
    }

    html[data-theme=&#39;dark&#39;] {
        --color-alert-info-text: #79c0ff;
        --color-alert-info-bg: rgba(56, 139, 253, 0.1);
        --color-alert-info-border: rgba(56, 139, 253, 0.4);
        --color-alert-warn-text: #e3b341;
        --color-alert-warn-bg: rgba(187, 128, 9, 0.1);
        --color-alert-warn-border: rgba(187, 128, 9, 0.4);
        --color-alert-error-text: #ff7b72;
        --color-alert-error-bg: rgba(248, 81, 73, 0.1);
        --color-alert-error-border: rgba(248, 81, 73, 0.4);
        --color-alert-success-text: #56d364;
        --color-alert-success-bg: rgba(46, 160, 67, 0.1);
        --color-alert-success-border: rgba(46, 160, 67, 0.4);
    }

    .tips {
        position: relative;
        padding: 20px 16px;
        margin-bottom: 20px;
        border-style: solid;
        border-width: 1px;
        border-radius: 6px;
        border-left-style: solid;
        border-left-width: 6px;
    }

    .tips.info {
        color: var(--color-alert-info-text);
        background-image: linear-gradient(var(--color-alert-info-bg), var(--color-alert-info-bg));
        border-color: var(--color-alert-info-border);
    }

    .tips.warn {
        color: var(--color-alert-warn-text);
        background-image: linear-gradient(var(--color-alert-warn-bg), var(--color-alert-warn-bg));
        border-color: var(--color-alert-warn-border);
    }

    .tips.error {
        color: var(--color-alert-error-text);
        background-image: linear-gradient(var(--color-alert-error-bg), var(--color-alert-error-bg));
        border-color: var(--color-alert-error-border);
    }

    .tips.success {
        color: var(--color-alert-success-text);
        background-image: linear-gradient(var(--color-alert-success-bg), var(--color-alert-success-bg));
        border-color: var(--color-alert-success-border);
    }

    #tips-title {
        font-size: 19px;
        font-weight: 800;
        margin-bottom: 10px;
    }
&lt;/style&gt;&lt;div class=&#34;tips info&#34;&gt;&lt;p id=&#34;tips-title&#34;&gt;资源加权&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
