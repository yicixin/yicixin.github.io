<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>HTTP on yicixin&#39;s blog</title>
    <link>https://www.yici.xin/tags/http/</link>
    <description>Recent content in HTTP on yicixin&#39;s blog</description>
    <image>
      <url>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 24 Mar 2023 22:40:52 +0800</lastBuildDate><atom:link href="https://www.yici.xin/tags/http/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Http2.0和3.0</title>
      <link>https://www.yici.xin/post/tech/http2.0%E5%92%8C3.0/</link>
      <pubDate>Fri, 24 Mar 2023 22:40:52 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/http2.0%E5%92%8C3.0/</guid>
      <description>HTTP2.0 HTTP/2 是 HTTP/1.1 的替代者，它的主要目的是改进网络性能，提升用户体验。与 HTTP/1.1 相比，HTTP/2 具有以下几个主要优点：
多路复用 服务端推送 二进制分帧 流量控制 多路复用 多路复用：在 HTTP/1.1 中，如果要加载一个网页，浏览器需要创建一个个的连接来请求所有的资源（例如图片、CSS 文件和 JavaScript 文件）。这样会造成大量的连接建立和关闭，降低了效率。HTTP/2 允许在同一个连接上同时传输多个请求和响应，从而大大提高了效率。
这解决了一部分的HTTP1.0队头阻塞问题，可以假设这么一个情况，一个较大的js文件和一个较小的css文件都需要传输，但是如果js文件先于css文件，那么css文件就要等到js文件传输完之后才能进行传输，即使它比较小，其实可以更早的传输并使用。使用多路复用后，相当于发一部分js的包，发一部分css的包，这样较小的css包可以更早的传输完毕。
这在http1.0中是无法实现的，主要问题是 HTTP/1.1 是一个纯文本协议，它只在有效荷载（payload）的前面附加头（headers）。它不会进一步区分单个（大块）资源与其他资源。这是 HTTP/1.1 协议设计方式的一个基础限制。如果只有一个 HTTP/1.1 连接，那么在切换到发送新资源之前，必须完整地传输资源响应。如果前面的资源创建缓慢，可能会引起队头阻塞问题。这就是为什么浏览器开始为 HTTP/1.1 上的每个页面打开多个TCP链接(通常是6个)，你也可以通过多域名配置同时打开更多的TCP链接，也就是说，在不超过6个请求并发的情况下，就不会出现队头阻塞的情况。当然，大量的TCP链接肯定会导致更大的开销，如HTTPS的TLS握手操作。
HTTP/2 的目标非常明确：能够回到单个 TCP 连接，解决队头阻塞问题。或者说：我们希望能够正确地复用资源块（resource chunks）。这在 HTTP/1.1 中是不可能的，因为没有办法分辨一个块属于哪个资源，或者它在哪里结束，另一个块从哪里开始。HTTP/2 非常优雅地解决了这一问题，它在资源块之前添加了帧（frames）。
HTTP/2 在每个块前面放置一个的数据帧（DATA frame）。这些数据帧主要包含两个关键的元数据。首先：下面的块属于哪个资源。每个资源的“字节流（bytestream）”都被分配了一个唯一的数字，即流id（stream id）。第二：块的大小是多少。因此，通过“framing”单个消息，HTTP/2 比 HTTP/1.1 更加灵活。它允许在单个 TCP 连接上通过交错排列块来多路传输多个资源。它还解决了第一个资源缓慢时的队头阻塞问题。
资源加权
在多路复用的基础上，我们还可以控制单个链接上对不同资源的带宽分布，如
公平多路复用（例如两个渐进的 JPEGs）：12121212 加权多路复用（2是1的两倍）：22122122121 反向顺序调度（例如2是密钥服务器推送的资源）：22221111 部分调度（流1被中止且未完整发送）：112222 服务端推送 HTTP/2 允许服务端主动将内容推送给客户端，这样可以提前加载网页所需的资源，从而提高网页加载的速度。这样的服务端推送可以避免客户端需要再次发送请求以获取某些资源，从而减少网络延迟。
二进制分帧 HTTP/2 使用二进制编码，并通过分帧传输。这样可以避免字符编码问题，并提高了数据传输的效率。HTTP/2 中的帧有多种类型，每种类型的帧都有自己的特定用途，例如用于数据传输、流量控制和错误处理等。
流量控制 HTTP/2 允许实现流量控制，从而避免网络阻塞。在 HTTP/1.1 中，如果一个请求占用了大量的带宽，就可能导致其他请求的响应时间变长，影响用户体验。HTTP/2 的流量控制功能允许服务端和客户端协商请求和响应的速率，从而避免阻塞。
HTTP2.0的不足 队头阻塞问题 上文提到了HTTP2.0增加了多路复用机制解决了队头阻塞问题，但是还有一个问题，事实证明，HTTP/2 只解决了 HTTP 级别的队头阻塞，可以称之为“应用层”队头阻塞。然而，在典型的网络模型中，还需要考虑下面的其他层。也就是HTTP2.</description>
    </item>
    
  </channel>
</rss>
