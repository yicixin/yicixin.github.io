<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>图形学 on 绝知</title>
    <link>https://www.yici.xin/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/</link>
    <description>Recent content in 图形学 on 绝知</description>
    <image>
      <url>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://www.yici.xin/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Thu, 22 Feb 2024 00:28:31 +0800</lastBuildDate><atom:link href="https://www.yici.xin/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>光栅化直线绘制算法</title>
      <link>https://www.yici.xin/post/tech/%E5%85%89%E6%A0%85%E5%8C%96%E7%9B%B4%E7%BA%BF%E7%BB%98%E5%88%B6%E7%AE%97%E6%B3%95/</link>
      <pubDate>Thu, 22 Feb 2024 00:28:31 +0800</pubDate>
      
      <guid>https://www.yici.xin/post/tech/%E5%85%89%E6%A0%85%E5%8C%96%E7%9B%B4%E7%BA%BF%E7%BB%98%E5%88%B6%E7%AE%97%E6%B3%95/</guid>
      <description>光栅扫描显示器，如LCD显示器、LED屏幕，是由大量的小像素组成的矩阵，是一种画点的设备。由于屏幕是由离散的像素组成的，而直线是连续的，所以在绘制过程中需要某种形式的近似，以确定哪些像素最接近理想直线路径。直线光栅化算法的目标，就是根据给定的起点终点，计算出最靠近理想直线的像素点集。
直线绘制算法在计算机图形学中是非常基础的，它们是图形渲染的核心技术之一，所以算法应追求最极致的性能和效率，通常都会追求以下两点:
为了硬件友好性，通常都会避免使用浮点数和除法，尽量使用硬件加法完成所有的计算。
算法一般都会使用递推的形式，目的是每次计算新的像素点时，可以复用上一次计算的结果。
通常，算法会根据$|∆x|$和$|∆y|$的大小比较，选择一个递进方向，称为主方向，在主方向上，每次做$\pm1$操作，另一方向可能不变，也可能$\pm1$，这取决于误差项。
举个简单的算法例子，起点是(0,0)，终点是(9,3)，即理想直线是$y= \dfrac 1 3 x $ ,此时$|∆x|$&amp;gt;$|∆y|$，所以x轴方向是主方向，当我们绘制完起点像素(0,0)后，下一个像素点可以确定是$(1,?)$，具体是$p_0(1,0)$还是$p_1(1,1)$，这取决于哪个像素点与理想直线$y= \dfrac 1 3 x $的距离更近，我们可以计算出理想直线此时的点是$(1,\dfrac 1 3)$, 此时$p_0(1,0)$会更近，所以选择$p_0$像素点，即另一方向上不变，这个简单的算法没有满足上面提到的两点追求，我们使用了浮点数计算，且当前一次的计算对下一次计算没有任何帮助，看看常见的那些光栅化直线绘制算法是怎么做的
DDA算法 基本原理 DDA(Digital Differential analyzer)，即数值微分法，是用数值方法求解微分方程的一种算法。
直线用斜截式表示为 $$ y = kx+b $$ 其中的斜率k为$k=\dfrac {∆x} {∆y}= \dfrac {y_1-y_0} {x_1-x_0}$
第一个八分象限内的DDA算法 通用的DDA算法 不足之处 Bresenham算法 介绍两种理解方式，其原理是一样的，但推导方式略有不同
基本原理——形式一 基本原理——形式二 中点算法 </description>
    </item>
    
  </channel>
</rss>
